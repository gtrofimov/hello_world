# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  SOAVIRT_URL: "http://18.236.220.213:9080"
  USER: "demo"
  PASS: "demo-user"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Echo workspace
        run: |
          echo "$PWD","$SOAVIRT_URL", "$USER","$PASS"

      # Runs a set of commands using the runners shell
      - name: Uplaod to Parasoft Server
        run: |
              echo -e "\nUploading Files.\n"
              cd virt
              for file in *
              do
                echo ${file}
                curl -iv --raw \
                -u "$USER:$PASS" \
                -H "accept: application/json" \
                -H "Content-Type: multipart/form-data" \
                -F "file=@${file}" \
                "$SOAVIRT_URL/soavirt/api/v6/files/upload?id=%2FVirtualAssets%2F${file}&deploy=false&replace=true" \
                -o upload.log
                echo -e "\nDebug.\n"
                cat upload.log
                sleep 5s
                echo -e "\nDone."
              done
      # Runs a set of commands using the runners shell
      - name: Test the Asset
        run: |
              echo -e "\nTesting Virtual Assets.\n"
              curl -iv --raw "$SOAVIRT_URL/HelloWorld" -o test.log
              cat test.log
              echo -e "\nDone."
